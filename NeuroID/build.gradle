plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'maven-publish'
}
def versionPropsFile = rootProject.file("version.properties")
def versionProps = new Properties()
if (versionPropsFile.exists()) {
    versionProps.load(new FileInputStream(versionPropsFile))
}
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
def nameSpace = "com.neuroid"

def androidSDKVariant = "android-sdk"
def debugVariant = "-debug"
def reactNativeVariant = "react"
def advancedDeviceVariant = "advanced-device"

ext {
    versionName = "\"${versionProps['VERSION_MAJOR']}.${versionProps['VERSION_MINOR']}.${versionProps['VERSION_PATCH']}\""
}
group = nameSpace
version = versionName

android {
    compileSdkVersion = 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        versionName = "\"${versionProps['VERSION_MAJOR']}.${versionProps['VERSION_MINOR']}.${versionProps['VERSION_PATCH']}\""
    }

    buildTypes {
        debug {
            minifyEnabled false
            jniDebuggable true
            buildConfigField "String", "VERSION_NAME", "${defaultConfig.versionName}"
            buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "VERSION_NAME", "${defaultConfig.versionName}"
            buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        }
    }

    flavorDimensions = ["native", "adv"]

    productFlavors {
        android {
            dimension "native"
        }
        reactNative {
            dimension "native"
        }
        lib {
            dimension "adv"
        }
        advancedDeviceLib {
            dimension "adv"
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            def versionName = defaultConfig.versionName.replace('\"', '')
            outputFileName = "${variant.getFlavorName()}/neuro-id-android-sdk-${variant.getFlavorName()}-$versionName-${variant.buildType.name}.aar"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        compose true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.2.0'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.2.0'
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.+'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation "androidx.test:core-ktx:1.4.0"
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'com.google.truth:truth:0.43'
    testImplementation 'io.mockk:mockk:1.12.0'
    testImplementation 'org.json:json:20140107'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1"

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.lifecycle:lifecycle-process:2.4.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'

    implementation "org.jetbrains.kotlin:kotlin-reflect:1.7.10"

    // compose stuff
    implementation "androidx.compose.ui:ui:1.2.0"
    implementation "androidx.navigation:navigation-compose:2.5.3"
    implementation 'androidx.navigation:navigation-runtime-ktx:2.5.3'

    reactNativeImplementation("com.facebook.react:react-native:0.71.0-rc.0")

    advancedDeviceLibImplementation("com.fingerprint.android:pro:2.3.2") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }

    // okhttp lib added to keep consistency across the platforms (ReactNative, Native)
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.2'
    implementation "androidx.navigation:navigation-compose:2.5.3"
    implementation "androidx.compose.ui:ui:1.2.0"
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            androidLibRelease(MavenPublication) {
                // Applies the component for the release build variant.
                from components.androidLibRelease

                // You can then customize attributes of the publication as shown below.
                groupId = nameSpace
                artifactId = "$androidSDKVariant"
                version = versionName
                artifact androidSourcesJar
            }
            // Creates a Maven publication called “debug”.
            androidLibDebug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.androidLibDebug

                groupId = nameSpace
                artifactId = "$androidSDKVariant$debugVariant"
                version = versionName
                artifact androidSourcesJar
            }
            reactNativeLibRelease(MavenPublication) {
                // Applies the component for the release build variant.
                from components.reactNativeLibRelease

                // You can then customize attributes of the publication as shown below.
                groupId = nameSpace
                artifactId = "$reactNativeVariant-$androidSDKVariant"
                version = versionName
                artifact androidSourcesJar
            }
            // Creates a Maven publication called “debug”.
            reactNativeLibDebug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.reactNativeLibDebug

                groupId = nameSpace
                artifactId = "$reactNativeVariant-$androidSDKVariant$debugVariant"
                version = versionName
                artifact androidSourcesJar
            }

            // Creates a Maven publication called "release".
            androidAdvancedDeviceLibRelease(MavenPublication) {
                // Applies the component for the release build variant.
                from components.androidAdvancedDeviceLibRelease

                // You can then customize attributes of the publication as shown below.
                groupId = nameSpace
                artifactId = "android-$advancedDeviceVariant-sdk"
                version = versionName
                artifact androidSourcesJar
            }
            // Creates a Maven publication called “debug”.
            androidAdvancedDeviceLibDebug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.androidAdvancedDeviceLibDebug

                groupId = nameSpace
                artifactId = "android-$advancedDeviceVariant-sdk$debugVariant"
                version = versionName
                artifact androidSourcesJar
            }
            reactNativeAdvancedDeviceLibRelease(MavenPublication) {
                // Applies the component for the release build variant.
                from components.reactNativeAdvancedDeviceLibRelease

                // You can then customize attributes of the publication as shown below.
                groupId = nameSpace
                artifactId = "$reactNativeVariant-android-$advancedDeviceVariant-sdk"
                version = versionName
                artifact androidSourcesJar
            }
            // Creates a Maven publication called “debug”.
            reactNativeAdvancedDeviceLibDebug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.reactNativeAdvancedDeviceLibDebug

                groupId = nameSpace
                artifactId = "$reactNativeVariant-android-$advancedDeviceVariant-sdk$debugVariant"
                version = versionName
                artifact androidSourcesJar
            }
        }
    }
}