plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'maven-publish'
}
def versionPropsFile = rootProject.file("version.properties")
def versionProps = new Properties()
if (versionPropsFile.exists()) {
    versionProps.load(new FileInputStream(versionPropsFile))
}
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
ext {
    versionName = "\"${versionProps['VERSION_MAJOR']}.${versionProps['VERSION_MINOR']}.${versionProps['VERSION_PATCH']}\""
}
group = 'com.neuroid'
version = versionName

android {

    compileSdkVersion 31

    defaultConfig {
        minSdk 16
        targetSdk 31
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            minifyEnabled false
            jniDebuggable true
            buildConfigField "String", "VERSION_NAME", "\"${versionProps['VERSION_MAJOR']}.${versionProps['VERSION_MINOR']}.${versionProps['VERSION_PATCH']}\""
            buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "VERSION_NAME", "\"${versionProps['VERSION_MAJOR']}.${versionProps['VERSION_MINOR']}.${versionProps['VERSION_PATCH']}\""
            buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        }
    }

    flavorDimensions "version"

    productFlavors {
        androidLib {
            dimension "version"
        }
        reactNativeLib {
            dimension "version"
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${variant.getFlavorName()}/neuro-id-android-sdk-${variant.getFlavorName()}-${variant.buildType.name}.aar"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    testImplementation 'junit:junit:4.+'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation "androidx.test:core-ktx:1.4.0"
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'com.google.truth:truth:0.43'
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation("androidx.lifecycle:lifecycle-process:2.4.1")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1")
    reactNativeLibImplementation("com.facebook.react:react-native:+")
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            androidLibRelease(MavenPublication) {
                // Applies the component for the release build variant.
                from components.androidLibRelease

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.neuroid'
                artifactId = 'android-sdk'
                version = versionName
                artifact androidSourcesJar
            }
            // Creates a Maven publication called “debug”.
            androidLibdebug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.androidLibDebug

                groupId = 'com.neuroid'
                artifactId = 'android-sdk-debug'
                version = versionName
                artifact androidSourcesJar
            }
            reactNativeLibRelease(MavenPublication) {
                // Applies the component for the release build variant.
                from components.reactNativeLibRelease

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.neuroid'
                artifactId = 'react-android-sdk'
                version = versionName
                artifact androidSourcesJar
            }
            // Creates a Maven publication called “debug”.
            reactNativeLibDebug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.reactNativeLibDebug

                groupId = 'com.neuroid'
                artifactId = 'react-android-sdk-debug'
                version = versionName
                artifact androidSourcesJar
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                /** Configure path of your package repository on Github
                 *  Replace GITHUB_USERID with your/organisation Github userID and REPOSITORY with the repository name on GitHub
                 */
                url = uri("https://maven.pkg.github.com/Neuro-ID/neuroid-android-sdk")

                /**Create github.properties in root project folder file with gpr.usr=GITHUB_USER_ID  & gpr.key=PERSONAL_ACCESS_TOKEN**/
                def githubProperties = new Properties()
                githubProperties.load(new FileInputStream(rootProject.file("github.properties")))

                credentials {
                    /**Create github.properties in root project folder file with gpr.usr=GITHUB_USER_ID  & gpr.key=PERSONAL_ACCESS_TOKEN**/
                    username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                    password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
                }
            }
        }
    }
}